-- DROP TABLE IF EXISTS AUTHORITIES;
-- DROP TABLE IF EXISTS USERS;
DROP TABLE IF EXISTS LOG;

--USER TABLE
CREATE TABLE IF NOT EXISTS USERS (
  IDUSER   SERIAL,
  USERNAME VARCHAR(255) NOT NULL PRIMARY KEY,
  PASSWORD VARCHAR(255) NOT NULL,
  ENABLED  BOOLEAN      NOT NULL
);

--AUTHORITIES TABLE
CREATE TABLE IF NOT EXISTS AUTHORITIES (
  USERNAME  VARCHAR(255) NOT NULL,
  AUTHORITY VARCHAR(255) NOT NULL,
  CONSTRAINT FK_AUTHORITIES_USER FOREIGN KEY (USERNAME) REFERENCES USERS (USERNAME)
);

--LOG TABLE
CREATE TABLE IF NOT EXISTS LOG (
  IDLOG     SERIAL PRIMARY KEY,
  LOGSTRING VARCHAR(1000) NULL
);
-- DROP TABLE IF EXISTS SITE CASCADE;
CREATE TABLE IF NOT EXISTS SITE (
  ID    SERIAL PRIMARY KEY,
  URL   VARCHAR(255),
  TITLE VARCHAR(2047),
  STATE INTEGER
);
-- DROP TABLE IF EXISTS PAGE CASCADE;
CREATE TABLE IF NOT EXISTS PAGE (
  ID      SERIAL PRIMARY KEY,
  SITEID  INTEGER,
  URL     VARCHAR(2047),
  TITLE   VARCHAR(2047),
  PAGEDOC TEXT,
  CUTDOC  TEXT,
  CONSTRAINT FK_PAGE_SITE FOREIGN KEY (SITEID) REFERENCES SITE (ID)
);

CREATE TABLE IF NOT EXISTS CRITERIA (
  ID        SERIAL PRIMARY KEY,
  NAME      VARCHAR(10),
  SHORTDESC VARCHAR(512),
  LONGDESC  TEXT,
  DICT      TEXT
);

CREATE TABLE IF NOT EXISTS CHECKRESULT (
  ID         SERIAL PRIMARY KEY,
  CRITERIAID INTEGER,
  PAGEID     INTEGER,
  ANSWER     TEXT,
  BLOCK      TEXT,
  CONSTRAINT FK_CHECKRESULT_CRITERIA FOREIGN KEY (CRITERIAID) REFERENCES CRITERIA (ID),
  CONSTRAINT FK_CHECKRESULT_PAGE FOREIGN KEY (PAGEID) REFERENCES PAGE (ID)
);